/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package raven.application.form.other;

import com.sdm.model.MySQL;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import raven.toast.Notifications;

/**
 *
 * @author maduh
 */
public class SubjectAndRank extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(SubjectAndRank.class.getName());

    /**
     * Creates new form SubjectAndRank
     */
    public SubjectAndRank() {
        initComponents();

        setLoggerFile();

        jButton2.setEnabled(false);
        jButton5.setEnabled(false);

        loadSubjects();
        loadRanks();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Subject"));

        jLabel1.setText("Subject Name");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jButton1.setText("Save Subject");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Update Subject");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Subject Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 284, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Rank"));

        jLabel2.setText("Rank Name");

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jButton4.setText("Save Rank");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Update Rank");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Reset");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Rank Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel3.setText("* Select Subject or Rank from table to update");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        resetSubjects();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        resetRanks();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jButton1.setEnabled(false);

        // Validate input fields
        if (jTextField1.getText().trim().isEmpty()) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Please Enter Subject Name");
            jTextField1.requestFocus();
            jButton1.setEnabled(true);
            return;
        }

        // Get values from text fields
        final String subjectName = jTextField1.getText().trim();

        // Use SwingWorker to perform database operations in background
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Connection conn = null;
                try {
                    conn = MySQL.getConnection();
                    conn.setAutoCommit(false); // Disable auto-commit for transaction control

                    if (conn == null || conn.isClosed()) {
                        throw new SQLException("Database connection is closed or unavailable.");
                    }

                    // Check if subject already exists
                    try (PreparedStatement checkStmt = conn.prepareStatement(
                            "SELECT * FROM `subject` WHERE `name` = ? ")) {

                        checkStmt.setString(1, subjectName);

                        try (ResultSet rs = checkStmt.executeQuery()) {
                            if (rs.next()) {
                                return false; // Subject already exists
                            }
                        }
                    }

                    // Insert new Subject with a parameterized query
                    try (PreparedStatement insertStmt = conn.prepareStatement(
                            "INSERT INTO `subject` (`name`) "
                            + "VALUES (?)")) {

                        insertStmt.setString(1, subjectName);

                        int rowsAffected = insertStmt.executeUpdate();
                        if (rowsAffected > 0) {
                            conn.commit(); // Commit transaction after successful insert
                            return true;
                        } else {
                            conn.rollback(); // Rollback if no rows were inserted
                            return false;
                        }
                    }
                } catch (Exception e) {
                    if (conn != null) {
                        conn.rollback(); // Rollback transaction on error
                    }
                    logger.log(Level.SEVERE, "Subject save exception: ", e);
                    throw e;
                }
            }

            @Override
            protected void done() {
                try {
                    boolean success = get();
                    if (success) {
                        resetSubjects();
                        loadSubjects();
                        jTextField1.grabFocus();
                        Notifications.getInstance().show(Notifications.Type.SUCCESS,
                                Notifications.Location.TOP_CENTER, "Subject Saved Successfully!");
                    } else {
                        Notifications.getInstance().show(Notifications.Type.WARNING,
                                Notifications.Location.TOP_CENTER, "Subject Already Exists");
                    }
                } catch (Exception e) {
                    Notifications.getInstance().show(Notifications.Type.ERROR,
                            Notifications.Location.TOP_CENTER, "Error saving subject: " + e.getMessage());
                    logger.log(Level.SEVERE, "Error in subject save worker: ", e);
                } finally {
                    jButton1.setEnabled(true); // Re-enable the button
                }
            }
        };

        worker.execute(); // Start the background task
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Disable the button to prevent multiple submit
        jButton2.setEnabled(false);

        // Validate input fields
        if (jTextField1.getText().trim().isEmpty()) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Please Enter Subject Name");
            jTextField1.requestFocus();
            jButton2.setEnabled(true);
            return;
        }

        // Get the selected row index
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex == -1) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Please select a Subject to update");
            jButton2.setEnabled(true);
            return;
        }

        // Get the ID from the selected row (assuming ID is in the first column, index 0)
        final int subjectId = Integer.parseInt(jTable1.getValueAt(selectedRowIndex, 0).toString());

        // Get values from text fields
        final String name = jTextField1.getText().trim();

        // Use SwingWorker to perform database operations in the background
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Connection conn = null;
                try {
                    conn = MySQL.getConnection();
                    conn.setAutoCommit(false); // Ensure manual commit if needed

                    if (conn == null || conn.isClosed()) {
                        throw new SQLException("Database connection is closed or unavailable.");
                    }

                    // Check if another subject exists with the same name and NIC (but different ID)
                    try (PreparedStatement checkStmt = conn.prepareStatement(
                            "SELECT * FROM `subject` WHERE `name` = ?")) {

                        checkStmt.setString(1, name);

                        try (ResultSet rs = checkStmt.executeQuery()) {
                            if (rs.next()) {
                                jButton2.setEnabled(true);
                                return false; // Another subject with same details exists
                            }
                        }
                    }

                    // Update the subject with a parameterized query
                    try (PreparedStatement updateStmt = conn.prepareStatement(
                            "UPDATE `subject` SET `name` = ? WHERE `id` = ?")) {

                        updateStmt.setString(1, name);
                        updateStmt.setInt(2, subjectId);

                        int rowsAffected = updateStmt.executeUpdate();

                        if (rowsAffected > 0) {
                            conn.commit(); // Commit transaction after successful update
                            return true;
                        } else {
                            conn.rollback(); // Rollback if nothing was updated
                            return false;
                        }
                    }
                } catch (Exception e) {
                    if (conn != null) {
                        conn.rollback(); // Rollback in case of an error
                    }
                    logger.log(Level.SEVERE, "Subject update exception: ", e);
                    throw e;
                }
            }

            @Override
            protected void done() {
                try {
                    boolean success = get();
                    if (success) {
                        // Reload data after a successful update
                        loadSubjects(); // Assuming you have this method to refresh the table
                        resetSubjects(); // Assuming you have this method to clear fields
                        Notifications.getInstance().show(Notifications.Type.SUCCESS,
                                Notifications.Location.TOP_CENTER, "Subject Updated Successfully!");
                    } else {
                        Notifications.getInstance().show(Notifications.Type.WARNING,
                                Notifications.Location.TOP_CENTER, "Another Subject with the same details exists");
                    }
                } catch (Exception e) {
                    Notifications.getInstance().show(Notifications.Type.ERROR,
                            Notifications.Location.TOP_CENTER, "Error updating subject: " + e.getMessage());
                    logger.log(Level.SEVERE, "Error in subject update worker: ", e);
                }
            }
        };

        worker.execute(); // Start the background task
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            int selectedRowIndex = jTable1.getSelectedRow();
            if (selectedRowIndex != -1) {
                // Row is selected, enable Update button and disable Add button
                jButton1.setEnabled(false);
                jButton2.setEnabled(true);

                // Get the selected row's data and set it into the textfields
                jTextField1.setText(convertToString(jTable1.getValueAt(selectedRowIndex, 1)));
            } else {
                // No row selected, enable Add button and disable Update button
                jButton1.setEnabled(true);
                jButton2.setEnabled(false);
                // Clear the textfields
                resetSubjects();
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        jButton4.setEnabled(false);

        // Validate input fields
        if (jTextField2.getText().trim().isEmpty()) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Please Enter Rank Name");
            jTextField2.requestFocus();
            jButton4.setEnabled(true);
            return;
        }

        // Get values from text fields
        final String rankName = jTextField2.getText().trim();

        // Use SwingWorker to perform database operations in background
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Connection conn = null;
                try {
                    conn = MySQL.getConnection();
                    conn.setAutoCommit(false); // Disable auto-commit for transaction control

                    if (conn == null || conn.isClosed()) {
                        throw new SQLException("Database connection is closed or unavailable.");
                    }

                    // Check if rank already exists
                    try (PreparedStatement checkStmt = conn.prepareStatement(
                            "SELECT * FROM `rank` WHERE `name` = ? ")) {

                        checkStmt.setString(1, rankName);

                        try (ResultSet rs = checkStmt.executeQuery()) {
                            if (rs.next()) {
                                return false; // Rank already exists
                            }
                        }
                    }

                    // Insert new Rank with a parameterized query
                    try (PreparedStatement insertStmt = conn.prepareStatement(
                            "INSERT INTO `rank` (`name`) "
                            + "VALUES (?)")) {

                        insertStmt.setString(1, rankName);

                        int rowsAffected = insertStmt.executeUpdate();
                        if (rowsAffected > 0) {
                            conn.commit(); // Commit transaction after successful insert
                            return true;
                        } else {
                            conn.rollback(); // Rollback if no rows were inserted
                            return false;
                        }
                    }
                } catch (Exception e) {
                    if (conn != null) {
                        conn.rollback(); // Rollback transaction on error
                    }
                    logger.log(Level.SEVERE, "Rank save exception: ", e);
                    throw e;
                }
            }

            @Override
            protected void done() {
                try {
                    boolean success = get();
                    if (success) {
                        resetRanks();
                        loadRanks();
                        jTextField2.grabFocus();
                        Notifications.getInstance().show(Notifications.Type.SUCCESS,
                                Notifications.Location.TOP_CENTER, "Rank Saved Successfully!");
                    } else {
                        Notifications.getInstance().show(Notifications.Type.WARNING,
                                Notifications.Location.TOP_CENTER, "Rank Already Exists");
                    }
                } catch (Exception e) {
                    Notifications.getInstance().show(Notifications.Type.ERROR,
                            Notifications.Location.TOP_CENTER, "Error saving rank: " + e.getMessage());
                    logger.log(Level.SEVERE, "Error in rank save worker: ", e);
                } finally {
                    jButton4.setEnabled(true); // Re-enable the button
                }
            }
        };

        worker.execute(); // Start the background task                                     

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        // Disable the button to prevent multiple submit
        jButton5.setEnabled(false);

        // Validate input fields
        if (jTextField2.getText().trim().isEmpty()) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Please Enter Rank Name");
            jTextField2.requestFocus();
            jButton5.setEnabled(true);
            return;
        }

        // Get the selected row index
        int selectedRowIndex = jTable2.getSelectedRow();
        if (selectedRowIndex == -1) {
            Notifications.getInstance().show(Notifications.Type.WARNING,
                    Notifications.Location.TOP_CENTER, "Please select a Rank to update");
            jButton5.setEnabled(true);
            return;
        }

        // Get the ID from the selected row (assuming ID is in the first column, index 0)
        final int rankId = Integer.parseInt(jTable2.getValueAt(selectedRowIndex, 0).toString());

        // Get values from text fields
        final String name = jTextField2.getText().trim();

        // Use SwingWorker to perform database operations in the background
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Connection conn = null;
                try {
                    conn = MySQL.getConnection();
                    conn.setAutoCommit(false); // Ensure manual commit if needed

                    if (conn == null || conn.isClosed()) {
                        throw new SQLException("Database connection is closed or unavailable.");
                    }

                    // Check if another rank exists with the same name and NIC (but different ID)
                    try (PreparedStatement checkStmt = conn.prepareStatement(
                            "SELECT * FROM `rank` WHERE `name` = ?")) {

                        checkStmt.setString(1, name);

                        try (ResultSet rs = checkStmt.executeQuery()) {
                            if (rs.next()) {
                                jButton5.setEnabled(true);
                                return false; // Another rank with same details exists
                            }
                        }
                    }

                    // Update the rank with a parameterized query
                    try (PreparedStatement updateStmt = conn.prepareStatement(
                            "UPDATE `rank` SET `name` = ? WHERE `id` = ?")) {

                        updateStmt.setString(1, name);
                        updateStmt.setInt(2, rankId);

                        int rowsAffected = updateStmt.executeUpdate();

                        if (rowsAffected > 0) {
                            conn.commit(); // Commit transaction after successful update
                            return true;
                        } else {
                            conn.rollback(); // Rollback if nothing was updated
                            return false;
                        }
                    }
                } catch (Exception e) {
                    if (conn != null) {
                        conn.rollback(); // Rollback in case of an error
                    }
                    logger.log(Level.SEVERE, "Rank update exception: ", e);
                    throw e;
                }
            }

            @Override
            protected void done() {
                try {
                    boolean success = get();
                    if (success) {
                        // Reload data after a successful update
                        loadRanks(); // Assuming you have this method to refresh the table
                        resetRanks(); // Assuming you have this method to clear fields
                        Notifications.getInstance().show(Notifications.Type.SUCCESS,
                                Notifications.Location.TOP_CENTER, "Rank Updated Successfully!");
                    } else {
                        Notifications.getInstance().show(Notifications.Type.WARNING,
                                Notifications.Location.TOP_CENTER, "Another Rank with the same details exists");
                    }
                } catch (Exception e) {
                    Notifications.getInstance().show(Notifications.Type.ERROR,
                            Notifications.Location.TOP_CENTER, "Error updating rank: " + e.getMessage());
                    logger.log(Level.SEVERE, "Error in rank update worker: ", e);
                }
            }
        };

        worker.execute(); // Start the background task
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            int selectedRowIndex = jTable2.getSelectedRow();
            if (selectedRowIndex != -1) {
                // Row is selected, enable Update button and disable Add button
                jButton4.setEnabled(false);
                jButton5.setEnabled(true);

                // Get the selected row's data and set it into the textfields
                jTextField2.setText(convertToString(jTable2.getValueAt(selectedRowIndex, 1)));
            } else {
                // No row selected, enable Add button and disable Update button
                jButton4.setEnabled(true);
                jButton5.setEnabled(false);
                // Clear the textfields
                resetRanks();
            }
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isLetterOrDigit(c) && c != ' ') {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isLetterOrDigit(c) && c != ' ') {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField2KeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void resetSubjects() {
        jTextField1.setText("");
        jButton1.setEnabled(true);
        jButton2.setEnabled(false);
        jTable1.clearSelection();
    }

    private void resetRanks() {
        jTextField2.setText("");
        jButton4.setEnabled(true);
        jButton5.setEnabled(false);
        jTable2.clearSelection();
    }

    private String convertToString(Object value) {
        if (value == null) {
            return "";
        }
        return value.toString();
    }

    private void loadSubjects() {
        try {

            ResultSet rs = MySQL.search("SELECT * FROM `subject` ORDER BY `subject`.`id` ASC");
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("id"));
                v.add(rs.getString("name"));

                dtm.addRow(v);
            }

            jTable1.setModel(dtm);

        } catch (Exception e) {
            logger.log(Level.SEVERE, "Subject loading Exception: ", e);
            e.printStackTrace();
        }
    }

    private void loadRanks() {
        try {

            ResultSet rs = MySQL.search("SELECT * FROM `rank` ORDER BY `rank`.`id` ASC");
            DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("id"));
                v.add(rs.getString("name"));

                dtm.addRow(v);
            }

            jTable2.setModel(dtm);

        } catch (Exception e) {
            logger.log(Level.SEVERE, "Rank loading Exception: ", e);
            e.printStackTrace();
        }
    }

    private void setLoggerFile() {
        try {
            // Use the user's home directory as the base path for logfiles
            String userHome = System.getProperty("user.home");
            File logFolder = new File(userHome, "WeerasinghaPiriwena/logfiles");

            // Check if the "logfiles" folder exists, and create it if not
            if (!logFolder.exists()) {
                logFolder.mkdirs();  // mkdirs() will create parent directories if they don't exist
            }

            // Set up a FileHandler to write log messages to a file named "logfiles/invoice_log.txt"
            FileHandler fileHandler = new FileHandler(logFolder.getPath() + File.separator + "Subject_&_Rank_log.txt", true);
            fileHandler.setFormatter(new SimpleFormatter() {
                private final String format = "[%1$tF %1$tT] [%2$-7s] %3$s %n";

                @Override
                public synchronized String format(java.util.logging.LogRecord lr) {
                    Object[] params = lr.getParameters();
                    return String.format(format, new java.util.Date(lr.getMillis()), lr.getLevel(),
                            MessageFormat.format(lr.getMessage(), params));
                }
            });

            logger.addHandler(fileHandler);
        } catch (IOException | SecurityException e) {
            // If there is an issue setting up the FileHandler, log the exception to the console
            e.printStackTrace();
        }
    }
}
